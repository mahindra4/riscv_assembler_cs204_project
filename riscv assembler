#include <iostream>
#include <vector>
#include <map>
#include <fstream>
#include <string>
#include <set>
#include <bitset>
#include <sstream>

using namespace std;



vector<int> x(32,0); 
vector<string> instructions;
map<string,int> labels;
map<string,string> typeOfInstruction; // key = instruction (add,addi...) ,value = Type (R,I,UJ...)
// map<string,set<string>> fields; // key = Type (R,I,UJ), value = {opcode,func3,func7,...};  
char convert(int n){
    if(n<10){
        return (char)(n+'0');
    }
    else{
        return (char)('A'+(n-10));
    }
}
string bit_to_hex(bitset<32> b){
    string ans = "0x";
    int sum = 0;
    for(int i=31;i>=0;i--){
        sum = 2*sum+b[i];
        if(i%4==0){
            ans+=convert(sum);
            sum = 0;
        }
    }
    return ans;
}

void I(string s){
    //labels in immediate values?
    //case sensitive name of instruction?
    string temp=""; //temp string to store concise instruction
    
    string rd="",rs1="",imm="";
    bitset<32> machine_code;
    //string binary="";
    int i=0;
    
    while(s[i]!=' '){ //string s is containing instruction i.e having indexes with pc
        temp +=s[i];
        i++;
    }
    //if(temp=="addi" || temp =="andi" || temp=="ori" ||temp=="jalr"){
     while(s[i]!='x'){
            //if(s[i]!=' '||s[i]!=','){
              //  cout<<"error"<<endl;
                //break;
            //}
            i++; //moving upto we hit the first x i.e; rd
        }
        i++;
        while(s[i]!=' '&& s[i]!=','){
            rd += s[i];
            i++;
        }
        //if(rd=''){
          //  cout<<"error"<<endl;
            //exit;
        //}
        if(temp=="addi" || temp =="andi" || temp=="ori" ||temp=="jalr"){
        while(s[i]!='x'){
            //if(s[i]!=' '||','){
              //  cout<<"error"<<endl;
                //break;
            //}
            i++;
        }
        i++;
        while(s[i]!=' '&& s[i]!=','){
            rs1 +=s[i];
            i++;
        }
        //if(rs1=''){
          //  cout<<"error"<<endl;
            //exit;
        //}
        while(s[i]==' '||s[i]==','){
            i++;
        }
        while(s[i]!=' '&&s[i]!=','&&s[i]!='\n'&&s[i]!='\0'){
            imm+=s[i];
            i++;
        }
        //if(imm=''){
          //  cout<<"error"<<endl;
            //exit;
        //}
        //convert char of imm to int imm
        bool is_int = true;
        int i = 0;
        if(imm[0]=='-'){
            i = 1;
        }
        for(;i<imm.size();i++){
            int d = imm[i]-'0';
            if(d>9 || d<0){
                is_int = false;
                break;
            }
        }
        int x = (is_int)?stoi(imm):(labels[imm])<<2;

        // int x;
        // x = stoi(imm);

        //if(immediate>2047 || immediate<-2047){
            //cout<<"error"<<endl;
            //exit;
        //}
        bitset<12> immediate(x);
        // cout<<immediate<<" ;odihf\n"; // ******************************************
        int y;
         y= stoi(rd);
         //if(y>31 || y<0){
           //  cout<<"error"<<endl;
            // exit;
         //}
        bitset<5> dest_reg(y);
        int z;
         z=stoi(rs1);
         //if(z>31 || z<0){
           //  cout<<"error"<<endl;
            // exit;
         //}
         bitset<5> source_reg(z);
         
         
        for(int i=20;i<32;i++){
            machine_code[i]=immediate[i-20];
        }

        // cout<<machine_code<<" iudhfoisdf\n"; // *********************************************
        for(int i=15;i<20;i++){
            machine_code[i] = source_reg[i-15];
        }
        //bitset<3> addi_f3("000");
        //for(int i=12 ; i<15;i++){
        //    machine_code[i] = addi_f3[i-12];
        //}
        for(int i=7;i<12;i++){
            machine_code[i] = dest_reg[i-7];
        }
       // bitset<7> addi_opcode("0010011");
       // for(int i=0;i<7;i++){
        //    machine_code[i]= addi_opcode[i];
        //}
    }  
    
    if(temp=="addi"){
        bitset<3> addi_f3("000");
        for(int i=12 ; i<15;i++){
           machine_code[i] = addi_f3[i-12];
        }
         bitset<7> addi_opcode("0010011");
        for(int i=0;i<7;i++){
           machine_code[i]= addi_opcode[i];
        }
        //cout<<machine_code<<endl;
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    
    if(temp=="andi"){
        bitset<3> andi_f3("111");
        for(int i=12 ; i<15;i++){
           machine_code[i] = andi_f3[i-12];
        }
         bitset<7> andi_opcode("0010011");
        for(int i=0;i<7;i++){
           machine_code[i]= andi_opcode[i];
        }
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    if(temp=="ori"){
        bitset<3> ori_f3("110");
        for(int i=12 ; i<15;i++){
           machine_code[i] = ori_f3[i-12];
        }
         bitset<7> ori_opcode("0010011");
        for(int i=0;i<7;i++){
           machine_code[i]= ori_opcode[i];
        }
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    if(temp=="jalr"){
        bitset<3> jalr_f3("000");
        for(int i=12 ; i<15;i++){
           machine_code[i] = jalr_f3[i-12];
        }
         bitset<7> jalr_opcode("1100111");
        for(int i=0;i<7;i++){
           machine_code[i]= jalr_opcode[i];
        }
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }

    if(temp=="lb"||temp=="lw"||temp=="ld"||temp=="lh"){
        while(s[i]==' '||s[i]==','){
            i++;
        }
        while(s[i]!='('&&s[i]!=' '){
            imm += s[i];
            i++;
        }
        while(s[i]!='x'){
            i++;
        }
        i++;
        while(s[i]!='('&&s[i]!=' '&&s[i]!='\n'&&s[i]!='\0'){
            rs1 += s[i];
            i++;
        }
        //if(imm=''){
          //  cout<<"error"<<endl;
            //exit;
        //}
        //convert char of imm to int imm
        int x;
        x = stoi(imm);
        //if(immediate>2047 || immediate<-2047){
            //cout<<"error"<<endl;
            //exit;
        //}
        bitset<12> immediate(x);
        int y;
         y= stoi(rd);
         //if(y>31 || y<0){
           //  cout<<"error"<<endl;
            // exit;
         //}
        bitset<5> dest_reg(y);
        int z;
         z=stoi(rs1);
         //if(z>31 || z<0){
           //  cout<<"error"<<endl;
            // exit;
         //}
         bitset<5> source_reg(z);
         
         
        for(int i=20;i<32;i++){
            machine_code[i]=immediate[i-20];
        }
        for(int i=15;i<20;i++){
            machine_code[i] = source_reg[i-15];
        }
        //bitset<3> addi_f3("000");
        //for(int i=12 ; i<15;i++){
        //    machine_code[i] = addi_f3[i-12];
        //}
        for(int i=7;i<12;i++){
            machine_code[i] = dest_reg[i-7];
        }
       // bitset<7> addi_opcode("0010011");
       // for(int i=0;i<7;i++){
        //    machine_code[i]= addi_opcode[i];
        //}
        
    }
    
    if(temp=="lb"){
        bitset<3> lb_f3("000");
        for(int i=12 ; i<15;i++){
           machine_code[i] = lb_f3[i-12];
        }
         bitset<7> lb_opcode("0000011");
        for(int i=0;i<7;i++){
           machine_code[i]= lb_opcode[i];
        }
        //cout<<machine_code<<endl;
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    
    if(temp=="lh"){
        bitset<3> lh_f3("001");
        for(int i=12 ; i<15;i++){
           machine_code[i] = lh_f3[i-12];
        }
         bitset<7> lh_opcode("0000011");
        for(int i=0;i<7;i++){
           machine_code[i]= lh_opcode[i];
        }
        //cout<<machine_code<<endl;
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    
    if(temp=="lw"){
        bitset<3> lw_f3("010");
        for(int i=12 ; i<15;i++){
           machine_code[i] = lw_f3[i-12];
        }
         bitset<7> lw_opcode("0000011");
        for(int i=0;i<7;i++){
           machine_code[i]= lw_opcode[i];
        }
        //cout<<machine_code<<endl;
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    if(temp=="ld"){
        bitset<3> ld_f3("011");
        for(int i=12 ; i<15;i++){
           machine_code[i] = ld_f3[i-12];
        }
         bitset<7> ld_opcode("0000011");
        for(int i=0;i<7;i++){
           machine_code[i]= ld_opcode[i];
        }
        //cout<<machine_code<<endl;
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
        //cout<<machine_code<<endl;
        //int k = bin_to_dec(machine_code);
        //cout<<k<<endl;
        //string p = dec_to_hex(k);
        //cout<<p<<endl;
}


void S(string s){
    string rs1="",rs2="",imm="";
    bitset<32> machine_code;
    
    string temp="";
    int i=0;
    //while(s[i]==' '||','){
      //  i++;
    //}
    while(s[i]!=' '&&s[i]!=','){
        temp += s[i];
        i++;
    }
    while(s[i]!='x'){
        i++;
    }
    i++;
    while(s[i]!=' '&&s[i]!=','){
        rs2 += s[i];
        i++;
    }
    //if(rs2==''){
        //cout<<"error"<<endl;
        //exit;
    //}
    while(s[i]==' '||s[i]==','||s[i]==')'||s[i]=='('){
        i++;
    }
    while(s[i]!=' '&&s[i]!=','&&s[i]!='('&&s[i]!=')'){
        imm += s[i];
        i++;
    }
    //if(imm==''){
        //cout<<"error"<<endl;
        //exit;
    //}
    
    while(s[i]!='x'){
        i++;
    }
    i++;
    while(s[i]!=' '&&s[i]!=','&&s[i]!=')'&&s[i]!='('&&s[i]!='\0'&&s[i]!='\n'){
        rs1 += s[i];
        i++;
    }
    //if(rs1==''){
        //cout<<"error"<<endl;
        //exit;
    //}
    bool is_int = true;
    i = 0;
    if(imm[0]=='-'){
        i = 1;
    }
    for(;i<imm.size();i++){
        int d = imm[i]-'0';
        if(d>9 || d<0){
            is_int = false;
            break;
        }
    }
    int x = (is_int)?stoi(imm):(labels[imm])<<2;
    //if(x>2047||x<-2048){
      //  cout<<"error"<<endl;
        //exit;
    //}
    
    bitset<12> immediate(x);
    
    int y=stoi(rs2);
    //if(y>31||y<0){
        //cout<<"error"<<endl;
        //exit;
    //}
    bitset<5> source_reg(y);
     
     int z=stoi(rs1);
        //if(y>31||y<0){
        //cout<<"error"<<endl;
        //exit;
    //}
    bitset<5> base_reg(z);
    
    for(int i=25;i<32;i++){
        machine_code[i]=immediate[i-20];
    }
    for(int i=20;i<25;i++){
        machine_code[i]=source_reg[i-20];
    }
    for(int i=15;i<20;i++){
        machine_code[i]=base_reg[i-15];
    }
    //for(int i=12;i<15;i++) f3
    for(int i=7;i<12;i++){
        machine_code[i]=immediate[i-7];
    }
    //for(int i=0;i<7;i++)  opcode
    
    if(temp=="sb"){
        bitset<3> sb_f3("000");
        
        for(int i=12;i<15;i++){
            machine_code[i]=sb_f3[i-12];
        }
        bitset<7> sb_opcode("0100011");
        
        for(int i=0;i<7;i++){
            machine_code[i]=sb_opcode[i];
        }
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    
    if(temp=="sw"){
        bitset<3> sw_f3("010");
        
        for(int i=12;i<15;i++){
            machine_code[i]=sw_f3[i-12];
        }
        bitset<7> sw_opcode("0100011");
        
        for(int i=0;i<7;i++){
            machine_code[i]=sw_opcode[i];
        }
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    
    if(temp=="sd"){
        bitset<3> sb_f3("011");
        
        for(int i=12;i<15;i++){
            machine_code[i]=sb_f3[i-12];
        }
        bitset<7> sb_opcode("0100011");
        
        for(int i=0;i<7;i++){
            machine_code[i]=sb_opcode[i];
        }
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    
    if(temp=="sh"){
        bitset<3> sb_f3("001");
        
        for(int i=12;i<15;i++){
            machine_code[i]=sb_f3[i-12];
        }
        bitset<7> sb_opcode("0100011");
        
        for(int i=0;i<7;i++){
            machine_code[i]=sb_opcode[i];
        }
        string p = bit_to_hex(machine_code);
        cout<<p<<endl;
    }
    
    
}
string binaryToHex(const string &binary) {
    bitset<32> machine_code(binary);
    string machine_instruction = "0x";
    int sum = 0;
    for(int i=31;i>=0;i--){
        sum = 2*sum+machine_code[i];
        if(i%4==0){
            machine_instruction += convert(sum);
            sum=0;
        }
    }
    return machine_instruction;
}

// Function to convert the r-format instruction to machine code
void R(string instruction) {
      //-->creating maps
        map<string, string> opcode;
        map<string, string> func3;
        map<string, string> func7;


            //--->for opcode
        opcode["add"] = "0110011";
        opcode["sub"] = "0110011";
        opcode["sll"] = "0110011";
        opcode["slt"] = "0110011";
        opcode["sltu"] = "0110011";
        opcode["xor"] = "0110011";
        opcode["srl"] = "0110011";
        opcode["sra"] = "0110011";
        opcode["or"] = "0110011";
        opcode["and"] = "0110011";
        opcode["addw"] = "0111011";
        opcode["subw"] = "0111011";
        opcode["sllw"] = "0111011";
        opcode["srlw"] = "0111011";
        opcode["sraw"] = "0111011";
        opcode["mul"] = "0110011";
        opcode["div"] = "0110011";
        opcode["rem"] = "0110011";

            //--->for function3
        func3["add"] = "000";
        func3["sub"] = "000";
        func3["sll"] = "001";
        func3["slt"] = "010";
        func3["sltu"] = "011";
        func3["xor"] = "100";
        func3["srl"] = "101";
        func3["sra"] = "101";
        func3["or"] = "110";
        func3["and"] = "111";
        func3["addw"] = "000";
        func3["subw"] = "000";
        func3["sllw"] = "001";
        func3["srlw"] = "010";
        func3["sraw"] = "011";
        func3["mul"] = "000";
        func3["div"] = "100";
        func3["rem"] = "110";

        //--->for function7
        func7["add"] = "0000000";
        func7["sub"] = "0100000";
        func7["sll"] = "0000000";
        func7["slt"] = "0000000";
        func7["sltu"] = "0000000";
        func7["xor"] = "0000000";
        func7["srl"] = "0000000";
        func7["sra"] = "0100000";
        func7["or"] = "0000000";
        func7["and"] = "0000000";
        func7["addw"] = "0000000";
        func7["subw"] = "0100000";
        func7["sllw"] = "0000000";
        func7["srlw"] = "0000000";
        func7["sraw"] = "0100000";
        func7["mul"] = "0000001";
        func7["div"] = "0000001";
        func7["rem"] = "0000001";
//----------------------------------------------------------------------------------------------------------------------------------------------------------
  
    //==========> Split the instruction into segments and store them in a map
    map<string, string> instructionmap;
    stringstream ss(instruction);
    string oper, rd, rs1, rs2;
    ss >> oper >> rd >> rs1 >> rs2;
    instructionmap["operator"] = oper;
    instructionmap["rd"] = rd;
    instructionmap["rs1"] = rs1;
    instructionmap["rs2"] = rs2;

    // =========>Get register numbers
    int register1 = stoi(instructionmap["rs1"].substr(1));
    int register2 = stoi(instructionmap["rs2"].substr(1));
    int destination = stoi(instructionmap["rd"].substr(1));

    //============> Convert register numbers to bitsets
    bitset<5> a1(register1);
    bitset<5> a2(register2);
    bitset<5> a3(destination);

    // Concatenate all the strings to form a binary string
    string output = func7[oper] + a2.to_string() + a1.to_string() + func3[oper] + a3.to_string() + opcode[oper];

    // Convert the binary string to hexadecimal machine code
    string machinecode = binaryToHex(output);

    cout<<machinecode<<endl;
}
// char convert(int n){
//     if(n<10){
//         return (char)(n+'0');
//     }
//     else{
//         return (char)('A'+(n-10));
//     }
// }
void SB(string instruction,int &pc){
    string opcode = "1100011";
    map<string,string> f3;
    f3["beq"] = "000";
    f3["bne"] = "001";
    f3["blt"] = "100";
    f3["bge"] = "101";
    int i=0,j=0;
    while(j<instruction.size() && (instruction[j]!=' ' && instruction[j]!=',')){
        j++;
    }
    string type = instruction.substr(i,j-i); // type of the instruction ex: beq,blt...
    while(j<instruction.size() && instruction[j]!='x'){
        j++;
    }
    i = j+1;
    while(j<instruction.size() && (instruction[j]!=' ' && instruction[j]!=',')){
        j++;
    }
    int r1 = stoi(instruction.substr(i,j-i)); // registor 1
    while(j<instruction.size() && instruction[j]!='x'){
        j++;
    }
    i = j+1;
    while(j<instruction.size() && (instruction[j]!=' ' &&  instruction[j]!=',')){
        j++;
    }
    int r2 = stoi(instruction.substr(i,j-i)); // registor 2
    j = instruction.size()-1;
    while(j>=0 && (instruction[j]!=' ' && instruction[j]!=',')){
        j--;
    }
    string label = instruction.substr(j+1,instruction.size()-j-1); // label of the instruction
    bool is_int = true;
    i = 0;
    if(label[0]=='-'){
        i = 1;
    }
    for(;i<label.size();i++){
        int d = label[i]-'0';
        if(d>9 || d<0){
            is_int = false;
            break;
        }
    }
    int offset = (is_int)?stoi(label):(labels[label]-pc)<<2; // offset is calculated by subtracting the pc of the label and pc

    // if(offset>4095 || offset<4096){
    //     return false
    // }

    bitset<32> machine_code(opcode);
    bitset<32> imm(offset);
    machine_code[7] = imm[11];
    for(int i=8;i<12;i++){
        machine_code[i] = imm[i-7];
    }
    bitset<3> func3(f3[type]);
    for(int i=12;i<15;i++){
        machine_code[i] = func3[i-12];
    }
    bitset<5> rs1(r1),rs2(r2);
    for(int i=15;i<20;i++){
        machine_code[i] = rs1[i-15];
    }
    for(int i=20;i<25;i++){
        machine_code[i] = rs2[i-20];
    }
    for(int i=25;i<31;i++){
        machine_code[i] = imm[i-20];
    }
    machine_code[31] = imm[20];
    string machine_instruction = "0x";
    int sum = 0;
    for(int i=31;i>=0;i--){
        sum = 2*sum+machine_code[i];
        if(i%4==0){
            machine_instruction += convert(sum);
            sum=0;
        }
    }
    cout<<machine_instruction<<endl;
}
void U(string instruction,int &pc){
    int i = 0,j = 0;
    int n = instruction.size();
    while(j<n && instruction[j]!=' ' && instruction[j]!=','){
        j++;
    }
    string type = instruction.substr(i,j-i); // type of the intruction
    while(j<n && (instruction[j]==' '|| instruction[j]==',')){
        j++;
    }
    // if(j==n || instruction[j]!='x'){
    //     return false; // error
    // }
    i = ++j;
    while(j<n && instruction[j]!=' ' && instruction[j]!=','){
        j++;
    }
    int r = stoi(instruction.substr(i,j-i)); // registor
    while(j<n && (instruction[j]==' '||instruction[j]==',')){
        j++;
    }
    i = j;
    while(j<n && instruction[j]!=' ' && instruction[j]!=','){
        j++;
    }
    string label = instruction.substr(i,j-i);
    bool is_int = true;
    i = 0;
    if(label[0]=='-'){
        i = 1;
    }
    for(;i<label.size();i++){
        int d = label[i]-'0';
        if(d>9 || d<0){
            is_int = false;
            break;
        }
    }
    int imm = (is_int)?stoi(label):(labels[label]-pc)<<2; // immediate value
    // if(r>31 || imm>2047 || imm <-2048){
    //     return false; // error
    // }
    string opcode = "0010111";
    if(type == "lui"){
        opcode = "0110111";
    }
    bitset<32> machine_code(opcode);
    bitset<5> rd(r);
    bitset<20> im(imm);
    for(int i=7;i<12;i++){
        machine_code[i]=rd[i-7];
    }
    for(int i=12;i<32;i++){
        machine_code[i]=im[i-12];
    }
    string machine_instruction = "0x";
    int sum = 0;
    for(int i=31;i>=0;i--){
        sum = 2*sum+machine_code[i];
        if(i%4==0){
            machine_instruction += convert(sum);
            sum=0;
        }
    }
    cout<<machine_instruction<<endl;
}
void UJ(string instruction,int &pc){
    int i = 0,j = 0;
    int n = instruction.size();
    while(j<n && instruction[j]!=' ' && instruction[j]!=','){
        j++;
    }
    string type = instruction.substr(i,j-i); // type of the intruction
    while(j<n && (instruction[j]==' '|| instruction[j]==',')){
        j++;
    }
    // if(j==n || instruction[j]!='x'){
    //     return false; // error
    // }
    i = ++j;
    while(j<n && instruction[j]!=' ' && instruction[j]!=','){
        j++;
    }
    int r = stoi(instruction.substr(i,j-i)); // registor
    while(j<n && (instruction[j]==' '||instruction[j]==',')){
        j++;
    }
    i = j;
    while(j<n && instruction[j]!=' ' && instruction[j]!=','){
        j++;
    }
    string label = instruction.substr(i,j-i);
    bool is_int = true;
    i = 0;
    if(label[0]=='-'){
        i = 1;
    }
    for(;i<label.size();i++){
        int d = label[i]-'0';
        if(d>9 || d<0){
            is_int = false;
            break;
        }
    }
    int imm = (is_int)?stoi(label):(labels[label]-pc)<<2; // immediate value
    // if(r>31 || imm>2047 || imm <-2048){
    //     return false; // error
    // }
    string opcode = "1101111";
    bitset<32> machine_code(opcode);
    bitset<5> rd(r);
    bitset<21> im(imm);
    // cout<<im<<" doihf\n";
    for(int i=7;i<12;i++){
        machine_code[i]=rd[i-7];
    }
    for(int i=12;i<20;i++){
        machine_code[i]=im[i];
    }
    machine_code[20] = im[11];
    for(int i=21;i<31;i++){
        machine_code[i] = im[i-20];
    }
    machine_code[31] = im[20];
    string machine_instruction = "0x";
    int sum = 0;
    for(int i=31;i>=0;i--){
        sum = 2*sum+machine_code[i];
        if(i%4==0){
            machine_instruction += convert(sum);
            sum=0;
        }
    }
    cout<<machine_instruction<<endl;
}
void typeInitialization(){  // initializes the type of every instruction
    typeOfInstruction["sb"] = "S";
    typeOfInstruction["sh"] = "S";
    typeOfInstruction["sw"] = "S";
    typeOfInstruction["sd"] = "S";

    typeOfInstruction["addi"] = "I";
    typeOfInstruction["andi"] = "I";
    typeOfInstruction["ori"] = "I";
    typeOfInstruction["lb"] = "I";
    typeOfInstruction["lh"] = "I";
    typeOfInstruction["lw"] = "I";
    typeOfInstruction["ld"] = "I"; 
    typeOfInstruction["jalr"] = "I"; 
    
    typeOfInstruction["add"] = "R"; 
    typeOfInstruction["and"] = "R"; 
    typeOfInstruction["or"] = "R"; 
    typeOfInstruction["sll"] = "R"; 
    typeOfInstruction["slt"] = "R"; 
    typeOfInstruction["sra"] = "R"; 
    typeOfInstruction["srl"] = "R"; 
    typeOfInstruction["sub"] = "R"; 
    typeOfInstruction["xor"] = "R"; 
    typeOfInstruction["mul"] = "R"; 
    typeOfInstruction["div"] = "R"; 
    typeOfInstruction["rem"] = "R"; 

    typeOfInstruction["beq"] = "SB";
    typeOfInstruction["blt"] = "SB";
    typeOfInstruction["bge"] = "SB";
    typeOfInstruction["bne"] = "SB";
    typeOfInstruction["auipc"] = "U";
    typeOfInstruction["lui"] = "U";
    typeOfInstruction["jal"] = "UJ";
}
vector<int> stack;
int top = -1;
string to_hex(int n){
    string ans = "";
    while(n){
        int r = n%16;
        ans = convert(r)+ans;
        n/=16;
    }
    if(ans=="") ans = "0";
    ans = "0x"+ans;
    return ans;
}
void toMachineCode(){
    int pc = 0;
    while(instructions[pc]!="eof"){
        cout<<to_hex(pc<<2)<<" - ";
        string cur_instruction = instructions[pc];
        int i=0;
        while(i<cur_instruction.length() && cur_instruction[i]!=' '){
            i++;
        }
        string type = cur_instruction.substr(0,i);
        type = typeOfInstruction[type];
        if(type == "R"){
            R(cur_instruction);
        }
        else if(type == "I"){
            I(cur_instruction);
        }
        else if(type == "S"){
            S(cur_instruction);
        }
        else if(type == "SB"){
            SB(cur_instruction,pc);
        }
        else if(type == "U"){
            U(cur_instruction,pc);
        }
        else if(type == "UJ"){
            UJ(cur_instruction,pc);
        }
        else{
            // label
        } 
        pc++;
    }
}
int main(){
    typeInitialization();
    x[0]=0;
    ifstream file;
    file.open("input.asm");
    if(!file){
        cerr<<"Error in opening file"<<endl;
        return 0;
    }
    string line;
    int c = 0;
    while(getline(file,line)){
        int i=0;
        while(i<line.length() && (line[i]==' '||line[i] ==',')){
            i++;
        }
        line = line.substr(i,line.length()-i); // removing the leading white spaces
        if(line=="") continue;
        i = line.length()-1;
        while(i>=0 && (line[i]==' ' || line[i]==',')){
            i--;
        }
        line = line.substr(0,i+1);
        i = 0;
        while(i<line.length() && line[i]!=' ' && line[i]!=','){
            i++;
        }
        if(line[i-1]==':'){ // checking if the instruction is label
            labels[line.substr(0,i-1)] = c; 
            typeOfInstruction[line.substr(0,i)] = "label";
            if(i!=line.length()){
                while(i<line.length() && (line[i]==',' || line[i]==' ')){
                    i++;
                }
                line = line.substr(i,line.length()-i);
            }
            else{
                continue;
            }
        }
        instructions.push_back(line);
        c++;
    }
    instructions.push_back("eof");
    // for(auto i:instructions){
    //     cout<<i<<endl;
    // }
    toMachineCode();
    return 0;
}
